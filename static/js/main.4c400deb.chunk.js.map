{"version":3,"sources":["constants/index.js","App.js","serviceWorker.js","index.js"],"names":["triggeredEvent","event","message","console","log","concat","customHead","title","styles","links","react_default","a","createElement","dist","App","style","padding","src","width","id","className","height","onLoad","onMouseOver","onMouseOut","border","allowFullScreen","position","paddingBottom","paddingTop","overflow","responsive","allow","sandbox","marginheight","marginwidth","scrolling","head","undefined","autoResizeContent","role","alt","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c400deb.chunk.js","sourcesContent":["import React from 'react';\nimport { MFrameCustomHead } from \"react-mframe\";\n\nexport const triggeredEvent = (event, message) => {\n    console.log(`${event} ${message}`);\n}\n\nexport const customHead = (title, styles, links) => (\n    <MFrameCustomHead title={title} styles={styles} links={links} />\n);","import React from 'react';\nimport { customHead, triggeredEvent} from \"./constants\";\nimport MFrame from \"react-mframe\";\n\nconst customStyles = `\n    body {\n      background-color: rebeccaPurple;\n    }\n    .red {\n        color: red;\n    }\n    .blue {\n        color: blue;\n    }\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div style={{ padding: \"20px\" }}>\n\n    <h2>IFrame - Load and Mouse Interaction Events</h2>\n    <MFrame src=\"https://share.constitutioncenter.org/amendment-xi\"\n            width=\"560\"\n            id=\"ConstitutionEmbed\"\n            className=\"iFrameConstitution\"\n            height=\"360\"\n            onLoad={() => { triggeredEvent(\"onload\", \"was triggered\")}}\n            onMouseOver={() => {  triggeredEvent(\"onmouseover\", \"has occurred\") }}\n            onMouseOut={() => { triggeredEvent(\"onmouseout\", \"has occurred\") }}\n            border=\"10px solid blue\"\n            allowFullScreen\n    />\n\n    <h2>IFrame - Responsive Iframe</h2>\n    <div style={{ position: \"relative\", paddingBottom: \"56.25%\", paddingTop: \"35px\", height: 0, overflow: \"hidden\"}}>\n      <MFrame src=\"https://www.youtube.com/embed/pTA0DSfrGZ0\"\n              responsive\n              allowFullScreen\n      />\n    </div>\n\n    <h2>Iframe - Using sandbox options</h2>\n\n    <MFrame src=\"https://platform.twitter.com/widgets/tweet_button.html\"\n              position=\"relative\"\n              width=\"61px\"\n              id=\"TwitterEmbed\"\n              className=\"twitterFrame\"\n              height=\"20px\"\n              allow=\"geolocation\"\n              sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"\n              allowFullScreen\n    />\n\n    <h2>IFrame - Setting Scrolling Margins Etc... </h2>\n\n    <MFrame src=\"https://maps.google.com/maps?width=100%&amp;height=600&amp;hl=en&amp;coord=37.374907, -122.012103&amp;q=740%20Kifer%20Rd%20Sunnyvale%2C%20CA%2094086+(MLSListings)&amp;ie=UTF8&amp;t=&amp;z=14&amp;iwloc=B&amp;output=embed\"\n            position=\"relative\"\n            width=\"100%\"\n            id=\"GoogleMapEmbed\"\n            height=\"600\"\n            allow=\"geolocation\"\n            marginheight=\"10\"\n            marginwidth=\"0\"\n            scrolling=\"no\"\n            sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"\n            allowFullScreen\n    />\n\n    <h2>IFrame - Passing Custom Content. </h2>\n\n    <MFrame head={customHead(\"Passed Title\", customStyles)}\n            height=\"200\"\n            position=\"relative\"\n            marginheight=\"10\"\n            >\n      <div>\n        <h1 className=\"red\">Salve Terra Rubrum</h1>\n        <h1 className=\"blue\">Salve Terra Caeruleum</h1>\n      </div>\n    </MFrame>\n\n    <h2>IFrame - Autosizing Custom Content - Inject External CSS </h2>\n\n      <MFrame\n        head={customHead(\"Passed Title\", undefined, [\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\", \"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"])}\n        width=\"50%\"\n        autoResizeContent\n        >\n        <div>\n        <div className=\"alert alert-success\" role=\"alert\">\n          <h4 className=\"alert-heading\">Hac impulsi occasione</h4>\n        <p><i className=\"fas fa-allergies\"></i> Quieta Gallia Caesar, ut constituerat, in Italiam ad conventus agendos proficiscitur. Ibi cognoscit de Clodii caede [de] senatusque consulto certior factus, ut omnes iuniores Italiae coniurarent, delectum tota provincia habere instituit.</p>\n          <hr />\n          <p className=\"mb-0\">Eae res in Galliam Transalpinam celeriter perferuntur. Addunt ipsi et adfingunt rumoribus Galli, quod res poscere videbatur, retineri urbano motu Caesarem neque in tantis dissensionibus ad exercitum venire posse.</p>\n        </div>\n        <div className=\"card\" style={{width: \"18rem\"}}>\n          <img className=\"card-img-top\" src=\"https://picsum.photos/180/100/\" alt=\"MLS Logo\" />\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Indictis inter se principes Galliae</h5>\n            <p className=\"card-text\">In primis rationem esse habendam dicunt, priusquam eorum clandestina consilia efferantur, ut Caesar ab exercitu intercludatur.</p>\n            <a href=\"http://www.mlslistings.com\" className=\"btn btn-primary\">In Via</a>\n          </div>\n        </div>\n        </div>\n      </MFrame>\n\n\n\n  </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}